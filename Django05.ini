- 랜더링
Django에서 뷰를 구현할 때, render 함수를 사용하는 것이 일반적이다.
render함수는 템플릿 파일과 context 데이터를 받아서 최종적인 HTML 응답을 생성하고 이를 HttpResponse 객체에 담아 반환한다.

render(request, 'template.html', context)

이미 내부적으로 HttpResponse를 사용하고 있다.

from django.template.loader import get_template

template = get_template('template.html')
html = template.render(context)
return HttpResponse(html)

- 가상환경
아나콘다 에러가 났던 이유 : 아나콘다를 설치를 할 때, 많은 패키지들을 설치한다.
프로젝트를 배포할 시 원격 서버에 따로 패키들을 설치해줘야한다.

1) 가상환경 생성
python -m venv myenv
현재 디렉토리에 myenv라는 새로운 가상환경을 생성한다.

2) 가상환경 활성화
myenv\Scripts\activate

3) 패키지 설치
pip install django

4) 프로젝트 생성, 앱 생성...

- 웹 서버 선택(Nginx, Apache)
웹 서버는 클라이언트의 요청을 받아서 처리하고 그 결과를 다시 클라이언트한테 전달하는 역할을 한다.

Nginx : 높은 동시 연결 처리 능력을 제공하여 많이 사용되고 있는 웹서버다. 설정이 비교적 간단하고, 정정 파일 처리 능력이 우수한다.
Apache : 가장 널리 사용되고 있는 오픈소스 웹 서버다. 다양한 모듈을 통해 기능 확장이 가능하다.

그러나 장고 어플리케이션은 파이썬으로 작성된 동적인 콘텐츠를 생성한다. 
이러한 작업을 처리하기 위해 WSGI(Web Server Gateway Interface) 어플리케이션 서버가 필요하다.
Gunicorn, uWSGI가 주로 사용된다.

Gunicorn : Green Unicorn은 Python WSGI HTTP Server로 파이썬 웹 어플리케이션과 함께 많이 사용되는 서버 중 하나.
설정과 배포가 상대적으로 간단하다. Nginx와 잘 연동해서 사용한다.
uWSGI : Python WSGI HTTP Server로 파이썬 웹 어플리케이션과 함께 많이 사용되는 서버 중 하나.
uWSGI는 여러 프로토콜과 스택들에 대해 지원하기 때문에 Gunicorn보다 다양한 설정과 커스터 마이징이 가능하다.

- Nginx 사용방법

1) Nginx 설치(운영체제의 패키지 관리자)
sudo apt-get Update
sudo apt-get install Nginx

2) Nginx 설정 (etc/Nginx/sites-available/)
Server{
    listen 80;
    Server_name your_domain;

    location / {
        include proxy_params;
        proxy_pass http://unix:/path/to/myapp/app.sock; # WSGI 어플리케이션 서버가 동작하는 주소
    }

    location / static/{
        alias/path/to/myapp/static/files/;
    }
}

3) Nginx 재시작
sudo service nginx restart

- Apache 사용방법

1) Apache 설치
sudo apt-get Update
sudo apt-get install apache2

2) Apache 설정
<VirtualHost *::80>
    ServerName your_domain

    WSGIScriptAlias //path/to/myapp/django/app/wsgi.py

    Alias /path/to/myapp/static/files/

    <Directory /path/to/myapp/django/app/>
        <File wsgi.py>
            Require all granted
        </File>
    </Directory>

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLOG ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>

3) Apache 재시작
sudo service apache2 restart

-Gunicorn

1) 설치
pip install Gunicorn

2) 실행
Gunicorn {프로젝트 이름}.wsgi

- uWSGI 

1) 설치
pip install uwsgi

2) 실행
uwsgi --heep : 8000 --module {프로젝트 이름}.wsgi

- 웹  서버와 WSGI 어플리케이션 서버 연동

웹 서버(Nginx, Apache)는 주로 정적 파일들의 처리를 담당한다.
WSGI (Gunicorn, uWSGI)는 주로 동적인 내용(장고 앱에서 처리되는 부분)들의 처리를 담당한다.

1) Nginx, Gunicorn 연동

+ Gunicorn 실행
Gunicorn {프로젝트 이름}.wsgi:application --bind 127.0.0.1:8000

+ Nginx 설정(etc/Nginx/sites-available/default)
location / {
    proxy_pass http://127.0.0.1:8000;
    proxy_set_header Host $host;
    proxy_set_header X-Real_IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

+ Nginx 재시작
sudo service nginx restart

2) Apache, uWSGI 연동

+ Apache 설정(환경설정 파일 httpd.conf)
<VirtualHost *::80>
    ServerName your_domain

    WSGIScriptAlias //path/to/myapp/django/app/wsgi.py

    Alias /path/to/myapp/static/files/

    <Directory /path/to/myapp/django/app/>
        <File wsgi.py>
            Require all granted
        </File>
    </Directory>

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLOG ${APACHE_LOG_DIR}/access.log combined
    ProxyPass / uWsgi://127.0.0.1:8000/
</VirtualHost>

+ Apache 재시작
sudo service apache2 restart

+ uWSGI 실행
uwsgi --http : 8001 --module{프로젝트 이름}.wsgi

- 정적 파일 관리
배포 환경에서는 collectstatic 명령어를 활용하여 정적 파일들을 한 곳에 모아두는 작업과 이 파일들에 접근할 수 있도록 웹 서버의 경로설정을 해줘야 한다.

1) collectstatic 실행
python manage.py collectstatic

해당 명령어를 실행하면 django 설정의 STATIC_ROOT에 지정된 디렉토리 모든 정적 파일들이 복사된다.

2) 웹 서버 설정 : 웹 서버는 클라이언트 직접 정적 파일에 접근할 수 있도록 설정해야 한다.

+ Nginx
location/ static/ {
    alias/path/to/myapp/static/files/;
}

+ Apache
<Directory /path/to/myapp/django/app/>
        <File wsgi.py>
            Require all granted
        </File>
    </Directory>

1) HTTPS 보안 설정
HTTPS(Hypertext Transfer Protocol Secure) : 웹 통신에서 데이터를 암호화하여 보안을 강화하는 프로토콜이다.
HTTPS를 사용하기 위해서는 SSL/TLS 인증서가 필요하다. 이는 CA(Certificate Authiority)를 구입하거나 다른 서비스(Let`s Encrypt)를 통해 사용할 수 있다.

+ Nginx 예시
server{
    listen 80;
    server_name your_domain;
    return 301 https://$host$request_url; # 전달받은 HTTP 요청을 모두 HTTPS로 리다이렉트
}

server {
    listen 443 ssl;
    server_name yout_domain;

    ssl_certificate /ect/letsencrypt/live/your_domain/fullchain.pem; # 인증서 경로
    ssl_certificate_key  /etc/letsencrypt/live/yout_domain/privkey.pem; # 개인키 경로
}

+ Apache 예시
<VirtualHost *:80>
    ServerName your_domain
    Redirect permanent / https://your_domain
</Validation>

<VirtualHost *:443>
    SeverName yout_domain

    SSLEngine on
    SSLCertificateFile "/path/to/www.sample_url.com"
    SSLCertificateKeyFile "/path/to/www.sample_url.com.key"
</Validation>

2) Django 보안 설정 : 장고 자체에도 보안 기능이 있어서 setting.py에서 설정이 가능하다.
+ DEBUG : 배포 환경에서는 False 설정
+ SECRET_KEY : 암호화 작업
+ ALLOWED_HOSTS : 서비스할 도메인 이름들만 추가하여 해당 호스트들만 작동되게 설정할 수 있다.
+ CSRF_COOKIE_SECURE, SESSION_COOKIE_SECURE : HTTPS를 사용할 경우 이 값들을 True로 설정하여 쿠키가 HTTPS를 통해서만 전송되도록 할 수 있다.
+ CSRF_COOKIE_HTTPONLY, SESSION_COOKIE_HTTPONLY : 이 값들 True로 설정하면 JavaScript에서 쿠키에 접근하는 것을 방지할 수 있다. 

- 배포

# 뷰 클래스, 폼 클래스를 활영해서 CRUD를 사용할 수 있는 사이트를 만들어보자
# 게시판, 블로그, SNS, 쇼핑몰 ...

디렉토리 생성 후 -> 이동
django-admin startproject 프로젝트명

cd 프로젝트명

python manage.py startapp 앱이름

모델수정

python manage.py makemigrations
python manage.py migrate

python manage.py createsuperuser

python manage.py runserver
