- {% load static %} : 정적 파일 탐색기
{% load %} : Django 템플릿에서 특정 라이브러리, 필터를 로드한다.

{% load astatic %}
<img src = "{% static 'images.jpg' %}"

- pythonanywhere 배포

1) 회원가입 rharhadn@naver.com 
2) 프로젝트를 전체 압축하여 files에 업로드 (home/YOUR_ID)
3) Bash 접속
4) ls 키워드를 사용하여 README 파일과 압축 파일 2개가 존재하는지 확인하기
5) unzip {압축파일}을 사용하여 압축풀기
6) virtualenv --python=python3.10 {가상환경이름} 으로 가상환경 생성
7) source {가상환경이름}/bin/activate 으로 가상환경 활성화
8) pip install django 를 통해 장고패키지 설치
9) pip install 필요한 패키지 설치
10) exit 키워드로 배쉬 종료
11) setting.py 수정하기
DEBUG = False
ALLOWED_HOSTS = ['TOUR_ID.pythonanywhere url']

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
12) 배쉬로 다시 돌아가서 가상환경에서 python manage.pycollectstatic으로 static 파일을 모아주기

13) Web으로 들어가서 add a new web app
14) Manual configuration 선택 -> python 최신 버전
15) Code -> Source Code : /home/YOUR_ID/프로젝트명
16) Working Directory, WSGI도 자신의 아이디가 제대로 들어가 있는지 확인
17) WSGI 파일 설정 -> 장고 부분만 사용 -> 자신의 아이디로 코드 변경
18) 가상환경 설정(Virtaulenv) : /home/YOUR_ID/프로젝트명
19) Static files -> URL : /static/ , Directory : /home/YOUR_ID/프로젝트명/static 

- 로그 남기기

+ 로그 레벨
1) DEBUG : 시스템의 상세 정보를 로그로 남기고 싶을 때, 프로그램이 어떻게 동작하는지에 대한 로그를 남길 수 있다.(디버깅 목적)
2) INFO : 시스템이 정상적으로 동작하고 있음을 알리는 로그를 남기고 싶을 때 사용한다.
3) WARNING : 문제가 될 수 있는 잠재적 이슈를 알리고 싶을 때 사용한다.
4) ERROR : 프로그램 실행 중 오류가 발생하여 작업을 수행하지 못했다는 것을 알릴 때 사용한다. 일부 동작이 작동하지 않게 작업가능하다.
5) CRITICAL : 매우 심각한 문제가 발생하여 프로그램이 계속 실행되지 못할 수 있다라는 것을 알릴 때 사용한다.

+ 파이썬 logging 모듈

1) 기본 로거 설정
import logging

logging.basicConfig(level=logginig.INFO) # 로그 설정ㅇ, level 파라미터를 통해 최소한으로 출력할 로그 레벨 지정

2) 로그 메시지 남기기
logging.debug('디버그 메세지')
logging.info('인포 메세지')
logging.warning('워닝 메세지')
logging.error('에러 메세지')
logging.critical('크리티컬 메세지')

3) 로거 객체 사용하기
logger = logging.getLogger(__name__)
logger.setLevel(logging.WARNING)

logger.warning('경고 메세지')

4) 핸들러(Handler)와 필터(Filter)
핸들러 : 로그 메세지가 출력될 위치를 결정한다.
StreamHandler : 로그 메세지를 스트림(콘솔, 터미널 등)에 출력
FileHndler : 로그 메세지를 파일에 출력
RotatingFileHandler : 파일 크기가 일정 크기에 도달하면 새로운 파일을 생성해서 계속 기록
TimedRotatinFileHandler : 일정 시간 간격으로 새로운 파일을 생성해서 계속 기록

필터 : 특정 조건을 만족하는 로그 메세지만 출력할 수 있도록 설정한다.
class NewFilter(logging.Filter):
    def filter(self, record):
        if 'error' in record.msg:
            return True
    
new_filter = NewFilter()
handler.addFilter(new_filter)

5) Handler와 Formatter 설정
c_handler = logging.StreamHandler()
f_handler = logging.FileHndler('file.log')

c_handler.setLevel(logging.DEBUG)
f_handler.setLevel(logging.ERROR)

c_format = logging.Formatter('%(name) - %(levelname) - %(message)')
f_format = logging.Formatter('%(asctime) - %(name) - %(levelname) - %(message)')

c_handler.setFormatter(c_format)
f_handler.setFormatter(f_format)

logger.addHandler(c_handler)
logger.addHandler(f_handler)

logger.debug('디버그 메세지입니다.')
logger.error('에러 메세지입니다.')

6) 로그 포맷팅

% 스타일
logging.basicConfig(format = '%(levelname):%(message)', level=logging.DEBUG)
logging.debug("디버그 메세지")

str.format() 스타일 (Python 3.2)
logging.basicConfig(format = '{levelname}:{message}', style = '{'level=logging.DEBUG)
logging.debug("디버그 메세지")

f-string 스타일 (Python 3.8)
logging.basicConfig(format = '%(levelname):%(message)', level=logging.DEBUG)
msg = "디버그 메세지"
level = 'DEBUG'
logging.debug(level, f'{msg}')

+ 설정 파일 관리 : logging.conf 또는 logging.json을 통해 로깅 설정을 분리 및 관리

INI 스타일 logging.conf
[loggers]
keys = root,sampleLogger

[handlers]
keys = consoleHandler

[formatters]
keys = sampleFormatter

[logger_root]
level = DEBUG
handler = consoleHandler

[logger_sampleLogger]
level = DEBUG
handlers = consoleHandler
qualname = sampleLogger
propagate = 0

[handler_consoleHandler]
class = StreamHandler
level = DEBUG
formatters = sampleFormatter
atgs = (sys.stdout,)

[formatter_sampleFormatter]
format = %(asctime) - %(name) - %(levelname) - %(message)
datefmt = &Y/%m/%d %I:%M:%S %p (년월일, 시분초)


import logging.config

logging.config.fileConfig('logging.conf')

logger = logging.getLogger('sampleLogger')
logger.debug('디버그 메세지')

{
    "version" : 1,
    "disable_existing_loggers" : false,
    "root": {
        "level" : "INFO",
        "handlers" : ["console"]
    },
    "handlers" : {
        "console": {
            "class" : "logging.StreamHandler",
            "formatter" : "sample",
            "stream" : "ext://sys.stdout"
        }
    },
    "formatter" : {
        "sample" : {
            format : "%(asctime) - %(name) - %(levelname) - %(message)"
        }
    }
}