웹 서버와 클라이언트는 HTTP 프로토콜을 사용하여 통신한다.
HTTP 응답 - 상태 줄(status line), 헤더(header), 빈 줄(blank line), 본문(body)

상태줄 : HTTP 버전, 상태코드, 상태 메시지
헤더 : 응답에 대한 추가 정보, (key:value) 형태로 이루어져 있다.
빈 줄 : 헤더와 본문 사이에 위치하며, 이것이 HTTP 요청의 끝을 나타낸다. 즉, 빈 줄이 있어야 헤더의 끝과 본문의 시작을 알 수 있다.

string : 널문자('\0') 문자열의 끝
HTTP 통신 : 빈 줄('\n') 요청의 끝

* Django : Python 기반 오픈 소스 웹 어플리케이션 프레임워크
+ 프레임워크 : 장고가 웹 어플리케이션 개발에 많은 기능을 제공하고, 만드는 것을 효율적으로 돕는다.

+ 장고 장점
소규모, 대규모 범위 관계없이 웹 어플리케이션 개발에 사용된다. 
관리자 패널, 데이터베이스, 인터페이스, 인증 및 권한 설정 등과 같은 다양한 기능들이 내장되어있다.

+ MVC와 MTV
MVC(Model-View-Controller) 소프트웨어 디자인 패턴
Model : 데이터베이스와 상호작용하는 부분, 데이터를 처리하고 검증한다.
View : 사용자에게 보여지는 부분 (UI 로직)
Controller : 모델과 뷰 사이에서 정보를 주고 받으며, 전체적인 흐름 제어 (백엔드 담당)

MVC 패턴 : 관심사 분리(Separation of Concerns)
세가지 역할로 구분한 이유는 어플리케이션의 로직을 명확히 구분함으로써 코드의 유지보수성, 가독성을 높일 수 있다. 
Model : 어플리케이션 데이터와 비즈니스 로직을 처리하는 부분, CRUD(Create, Read, Update, Delete) 작업 등을 수행한다.
View : User Interface, 모델에서 처리된 데이터를 사용자에게 보여준다.사용자의 입력을 받는다. (클라이언트와 공유하는 친구)
Controller : 사용자의 입력을 전달받아서 해당 작업에 맞는 모델 함수를 호출하고, 그 결과를 다시 뷰에 전달한다.


MTV(Model-Template-View) : Django에서 사용하는 디자인 패턴
Model : 데이터베이스와 상호작용하는 부분, 데이터를 처리하고 검증한다.
Template : 사용자에게 보여지는 부분, HTML, Django 템플릿 언어를 사용하여 만든다.
View : 컨트롤러 역할, 사용자의 요청을 받아 적절한 모델을 호출하고, 데이터, 값 들을 최종적으로 템플릿에 전달하여 페이지 생성한다.


