- Admin 사이트

+ 관리자 사이트 URL 변경
from django.contrib import admin
from django.urls import path,include

urlpatterns = [
    path('내가 원하는것/admin/', admin.site.urls),
]

+ 모델 관리 화면 커스터마이징(ModelAdmin 클래스)
list_display : 리스트 페이지에서 표시할 필드들이 지정한다.
from django.contrib import admin
from .models import NewModel

class NewModelAdmin(admin.ModelAdmin):
    list_display = ('field1', 'field2', 'field3'...)

admin.site.register(NewModel,NewModelAdmin)

list_filter : 리스트 페이지에 필터 사이바를 추가하고 해당 필드로 필터링 할 수 있다.
class NewModelAdmin(admin.ModelAdmin):
    list_filter = ('field1', 'field2') # 일부분만 필터 사이드바 추가 가능

search_fields : 검색 기능을 제공한다.
class NewModelAdmin(admin.ModelAdmin):
    search_fields = ('field1',..)

fields, fieldsets : 상세 페이지에서 표시할 필드들의 순서와 그룹화 방식을 정의한다.
fields : 각각의 필드를 개별적으로 나열하여 순서대로 표시한다.
class NewModelAdmin(admin.ModelAdmin):
    fields = ('field1', 'field2',...)

fieldset : 관련된 필드들을 그룹화한다.
class NewModelAdmin(admin.ModelAdmin):
    fieldsets = (
        ('Group1', {
            'field' : ('field1','field2')
        }),
        ('Group2', {
            'field' : ('field3','field4'....)
        }) 
    )

date_hierarchy : 날짜 계층 구조(navigation)을 생성하여 날짜 기반으로 탐색 기능을 제공한다.
class NewModelAdmin(admin.ModelAdmin):
    date_hierarchy = 'created_at'

prepopulated_fields : 다른 필드 값을 기반으로 자동으로 값 채우기
actions : 선택된 객체들에 대해 일괄 작업을 사용 가능하게 한다
ordering : 정렬 순서 설정

+ admin 템플릿 경로
C:\Users\kosmo\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\contrib\admin\templates\admin

+ 관리자 페이지에서 외부 패키지(django Admin Third-Party Packages)
django-grappelli : 관리자 사이트에 Bootstrap 테마 적용
django-suit : 외관, 사용성 개선
django-jet : jQuery, Bootstrap 적용
django-import-export : Excel, CSV 등의 파일 형식으로 데이터를 가져오고 내보내기 용이하게

+ 파이썬 shell
모델 import : 모델 클래스를 사용하기 위해 모델들을 import 해야한다.
모델 조회 : objects manager를 사용하여 데이터베이스 객체 조회
데이터 생성 : create() 메서드나 객체 인스턴스 생성 후 save() 메서드 등으로 데이터베이스 추가 생성
데이터 수정 : 조회한 객체에 속성 값을 변경한 후 save() 메서드 등으로 데이터베이스 변경사항 저장
데이터 삭제 : 조회한 객체에 .delete() 메서드로 삭제

단일 객체 검색 : .get() 메서드 사용
조건 검색 : .filter() 메서드 사용
정렬 : .order_by()
조건 연산자 :  Q 객체 및 연산자 활용

.count() : 몇 개 있는지?
.exists() : 결과가 있는지?

; 실행 명령어
; python manage.py shell
; from vote.models import Question, Choice
; from django.utils import timezone
; q = Question(question_text="비콘은 찍었니?", pub_date=timezone.now())
; q.save()
; Question.objects.all()
; 결과 = <QuerySet [<Question: 민지>, <Question: 한글>, <Question: 비콘은 찍었니?>]>
